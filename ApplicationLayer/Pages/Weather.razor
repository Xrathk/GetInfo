@using LogicLayer.Data.ApiObjects.WeatherAPI
@inject LogicLayer.Services.WeatherApiOperations WeatherOperations

@page "/weather"

@if (userDataRetrieved == UserDataRetrievalStatus.Retrieved)
{
    <div class="text-center">
        <h2>Welcome to GetInfo's weather center!</h2>
        <br />
        <p>Enter the name of the location you'd like a weather report on:</p>
        <div>
            <input class="form-control form-control-lg" type="text" placeholder="Location" @bind="searchedLocation" style="width:30%;margin:auto;">
            <button type="button" class="btn btn-light" @onclick="@(async () => {reportCardLocation = searchedLocation; reportType = WeatherReportType.NewLocation; await GetWeatherReport();})" style="margin-top:0.4rem">Search</button>
            <br />
            <br />
        </div>
        @if (!string.IsNullOrEmpty(currentLocation))
        {
            <p>Alternatively, you can get a weather report on your current location:</p>
            <button type="button" class="btn btn-info btn-lg btn-block"  @onclick="@(async () => {reportCardLocation = currentLocation; reportType = WeatherReportType.CurrentLocation; await GetWeatherReport();})"  style="width:25%;color:white">Get weather report for @currentLocation</button>
        }
        else
        {
            <div class="alert alert-secondary shadow-sm" role="alert" style="width:70%;margin:auto">
                <b>You can always get a weather report for your current location. You can set your current location on the <a href="myaccount"> account customization</a> page.</b>
            </div>
        }
        <br/>
        <br/>
        @if (submissionStatus == FormSubmissionStatus.CurrentlyProcessed)
        {
            <SpinnerLoader />
        }
        else if (submissionStatus == FormSubmissionStatus.Accepted)
        {
            @if (reportDisplay == ReportCardDisplayStatus.SuccessfulRequest)
            {
                <div class="card shadow border-primary">
                    <div class="card-body">
                        <div class="container">
                          <div class="row">
                            <div class="col-4">
                              <img src=@weatherIconPath alt="WeatherIcon">
                            </div>
                            <div class="col-8">
                              <p id="p1">@reportCardLocation</p>
                            </div>
                          </div>
                          <hr style="background-color:white;height:4px">
                          <div class="row">
                            <p id="p2">@responseData.data.condition.text</p>
                          </div>
                          <div class="row">
                            <p id="p2">@responseData.data.temp_c °C</p>
                          </div>
                        </div>
                    </div>
                </div>
            }
            else if (reportDisplay == ReportCardDisplayStatus.BadRequest)
            {
                <div class="alert alert-warning" role="alert">
                    Error - Could not fetch location data about "@searchedLocation".
                </div>
            }
        }
    </div>
}
else
{
    <SpinnerLoader />
}



@code {
    // Current location
    private string currentLocation = "";
    // Searched location
    private string searchedLocation = "";
    // Displayed report card location
    private string reportCardLocation = "";
    // User data retrieved status
    private UserDataRetrievalStatus userDataRetrieved = UserDataRetrievalStatus.Loading;
    // Type of search
    private WeatherReportType reportType = WeatherReportType.Undefined;
    // Display report card
    private ReportCardDisplayStatus reportDisplay = ReportCardDisplayStatus.NoRequest; 
    // User submission status
    private FormSubmissionStatus submissionStatus = FormSubmissionStatus.NotSent; 


    private bool authorized = false; // Authorization variable
    private bool showReportCard = false; // Holds info on whether to display report card
    private int AppUserId = 0; // User ID by cookie

    // Weather report
    private WeatherResponseObject responseData = new WeatherResponseObject();
    private string weatherIconPath = ""; // Icon path for weather report
    private System.Net.HttpStatusCode requestStatus;

    /// <summary>
    /// Retrieves a weather report based on user input or user's current location.
    /// </summary>
    private async Task GetWeatherReport()
    {
        submissionStatus = FormSubmissionStatus.CurrentlyProcessed;
        // Retrieve data from service
        responseData = await WeatherOperations.GetWeatherData(AppUserId, reportCardLocation);

        // If request successful, display results
        if (responseData.responseStatus == System.Net.HttpStatusCode.OK)
        {
            // Get icon path for report card
            weatherIconPath = WeatherOperations.GetWeatherIconPath(responseData.data.condition.icon);

            // Display report card
            submissionStatus = FormSubmissionStatus.Accepted;
            reportDisplay = ReportCardDisplayStatus.SuccessfulRequest;
        }
        else // Display error message
        {
            submissionStatus = FormSubmissionStatus.Accepted;
            reportDisplay = ReportCardDisplayStatus.BadRequest;
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        // Initial cookie check
        var cookieValidity = await AccountOperations.VerifyAuthenticationCookie(ProtectedSessionStore);
        if (cookieValidity == 0) // Cookie valid
        {
            // Authorize user and find his ID
            await jsRuntime.InvokeAsync<string>("console.log", ErrorCodes.FindDescription(cookieValidity));
            authorized = true;
            var userCookie = (await ProtectedSessionStore.GetAsync<string>("SessionId")).Value;
            AppUserId = await AccountOperations.FetchUserBySessionId(userCookie);
        }
        else // Cookie invalid
        {
            await jsRuntime.InvokeAsync<string>("console.log", ErrorCodes.FindDescription(cookieValidity));
            UriHelper.NavigateTo("/login");
        }
        StateHasChanged(); // Update component

        // Get details for app user
        var userDetails = await AccountOperations.RetrieveUserDetails(AppUserId);
        currentLocation = userDetails.CurrentLocation;
        userDataRetrieved = UserDataRetrievalStatus.Retrieved;


    }
}
